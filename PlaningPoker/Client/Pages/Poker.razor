@page "/"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
 
<h3>Poker</h3>

@if (!_showRoom)
{
    <EditForm Model="@this" OnValidSubmit="@(() => _showRoom = true)">
        <DataAnnotationsValidator />
        <label for="playername">
            Name:
        </label>
        <input @bind:get="_playername" @bind:set="SetPlayername" @bind:event="oninput" id="playername" placeholder="Player's name" autofucus />
        <ValidationMessage For="@(() => _playername)" />

        <button disabled="@(string.IsNullOrWhiteSpace(_playername))">
            Connect
        </button>
    </EditForm>
}
else
{
    <Room Playername="@_playername" ConnectionFailed="() => _showRoom = false" />
}

@code {
    private const string LocalStorageKey = "playername";

    private bool _showRoom = false;

    [Required]
    private string _playername = string.Empty;

    private async Task SetPlayername(string value)
    {
        _playername = value;

        await LocalStorage.SetItemAsStringAsync(LocalStorageKey, _playername);
    }

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync(LocalStorageKey))
        {
            _playername = await LocalStorage.GetItemAsStringAsync(LocalStorageKey);
        }
        else
        {
            await LocalStorage.SetItemAsStringAsync(LocalStorageKey, string.Empty);
        }
    }
}
