@using Microsoft.AspNetCore.SignalR.Client
@using PlaningPoker.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>User: @Playername</h3>

<p>Connection state: @ConnectionState.ToString()</p>

<button @onclick="() => Vote(0)" disabled="@ReconnectingOrDisconnected">0</button>
<button @onclick="() => Vote(1)" disabled="@ReconnectingOrDisconnected">1</button>
<button @onclick="() => Vote(2)" disabled="@ReconnectingOrDisconnected">2</button>
<button @onclick="() => Vote(3)" disabled="@ReconnectingOrDisconnected">3</button>
<button @onclick="() => Vote(5)" disabled="@ReconnectingOrDisconnected">5</button>
<button @onclick="() => Vote(8)" disabled="@ReconnectingOrDisconnected">8</button>
<button @onclick="() => Vote(13)" disabled="@ReconnectingOrDisconnected">13</button>
<button @onclick="() => Vote(20)" disabled="@ReconnectingOrDisconnected">20</button>
<button @onclick="() => Vote(40)" disabled="@ReconnectingOrDisconnected">40</button>
<button @onclick="() => Vote(100)" disabled="@ReconnectingOrDisconnected">100</button>

<h4>Players</h4>
<ul>
    @foreach (var player in _players)
    {
        <li>
            Player's name: @player.Value.Name

            @if (_areVotesVisible)
            {
                @if (player.Value.Vote is not null)
                {
                    <div>
                        Vote: @player.Value.Vote
                    </div>
                }
            }
            else
            {
                @if (player.Value.Vote is not null)
                {
                    <div>
                        blue square
                    </div>
                }
            }
        </li>
    }
</ul>

<button @onclick="NewVote" disabled="@ReconnectingOrDisconnected">New vote</button>
<button @onclick="ShowVotes" disabled="@ReconnectingOrDisconnected">Show votes</button>

@if (ConnectionState is HubConnectionState.Disconnected)
{
    <div style="background-color: red; color: white;">
        Connection failed. Try to reconnect. <button @onclick="@(async () => await ConnectionFailed.InvokeAsync())">Ok</button>
    </div>
}

@code {
    private const int ExpectedMaximumPlayes = 10;

    private HubConnection? _hubConnection;
    private Dictionary<Guid, Player> _players = new(ExpectedMaximumPlayes);
    private bool _areVotesVisible = false;

    private HubConnectionState ConnectionState => _hubConnection?.State ?? HubConnectionState.Disconnected;

    private bool ReconnectingOrDisconnected => ConnectionState is HubConnectionState.Reconnecting or HubConnectionState.Disconnected;

    [Parameter, EditorRequired]
    public string Playername { get; init; } = string.Empty;

    [Parameter]
    public EventCallback ConnectionFailed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pokerhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.Reconnecting += ConnectionEvent;
        _hubConnection.Closed += ConnectionEvent;
        _hubConnection.Reconnected += OnReconnected;

        _hubConnection.On<IEnumerable<Player>, bool>("PlayerConnected", OnPlayerConnected);
        _hubConnection.On<IEnumerable<Player>>("PlayerDisconnected", OnPlayerDisconnected);
        _hubConnection.On<Player>("PlayerVoted", OnPlayerVoted);
        _hubConnection.On<IEnumerable<Player>>("NewVote", OnNewVote);
        _hubConnection.On("ShowVotes", OnShowVotes);

        try
        {
            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("PlayerConnected", Playername);
        }
        catch (HttpRequestException)
        {
        }
    }

    private Task ConnectionEvent(Exception? _)
    {
        StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task OnReconnected(string? _)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("PlayerConnected", Playername);
        }
    }

    private void OnPlayerConnected(IEnumerable<Player> players, bool areVotesVisible)
    {
        _players = players.ToDictionary(x => x.Id, x => x);

        _areVotesVisible = areVotesVisible;

        StateHasChanged();
    }

    private void OnPlayerDisconnected(IEnumerable<Player> players)
    {
        _players = players.ToDictionary(x => x.Id, x => x);

        StateHasChanged();
    }

    private async Task Vote(int number)
    {
        if (_hubConnection?.State is HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("Vote", number);
        }
    }

    private void OnPlayerVoted(Player player)
    {
        _players[player.Id] = player;

        StateHasChanged();
    }

    private async Task NewVote()
    {
        if (_hubConnection?.State is HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("NewVote");
        }
    }

    private void OnNewVote(IEnumerable<Player> players)
    {
        _players = players.ToDictionary(x => x.Id, x => x);

        _areVotesVisible = false;

        StateHasChanged();
    }

    private async Task ShowVotes()
    {
        if (_hubConnection?.State is HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("ShowVotes");
        }
    }

    private void OnShowVotes()
    {
        _areVotesVisible = true;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
